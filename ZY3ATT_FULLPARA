load('/Users/c_c/Desktop/ZY3Fusion/STG201505.mat')
[time,q1,q2,q3]=Readatt;%read quan in the attfile 
coord_true=[-2876619.609	4631614.857	3298587.307
            -2871113.463	4633730.138	3300409.912
            -2841739.03	    4631124.052	3329161.731
            -2842655.248	4633698.521	3324822.779
            -2841729.877	4633414.103	3326000.815
            -2841540.611	4633407.55	3326146.76
            -2838845.777	4635469.185	3325604.245
            -2839230.702	4635385.811	3325393.562
            -2837190.402	4631233.438	3332861.354
            -2863924.347	4626805.502	3316218.023
            -2857297.682	4630671.466	3316535.671
            -2857174.52	    4630541.571	3316820.922
            -2853192.175	4629258.291	3322009.333
            -2832250.658	4642791.636	3321041.555
            -2869655.589	4623848.022	3315393.346
            -2873294.101	4621286.599	3315810.685
            -2863144.047	4645376.278	3290976.255
            -2863435.334	4643055.372	3294004.242];
% sensors install matrix
Body2StarSensorOne=[cos(29.13212*pi/180) cos(104.8425*pi/180) cos(65.5449*pi/180)
                    cos(75.98529*pi/180) cos(120.6005*pi/180) cos(145.6867*pi/180)
                    cos(65.0185*pi/180) cos(34.7422*pi/180) cos(112.497*pi/180)];
Body2StarSensorTwo=[cos(21.68954*pi/180) cos(92.60966*pi/180) cos(111.5162*pi/180)
                    cos(102.7403*pi/180) cos(149.8423*pi/180) cos(116.833*pi/180)
                    cos(107.2508*pi/180) cos(59.97562*pi/180) cos(144.4336*pi/180)];
Body2StarSensorThree=[cos(63.63085*pi/180) cos(92.72818*pi/180) cos(26.53156*pi/180)
                      cos(68.95412*pi/180) cos(154.8806*pi/180) cos(103.0838*pi/180)
                      cos(34.83029*pi/180) cos(65.0493*pi/180) cos(112.6469*pi/180)];
Body2Gyro=[cos(54.72148*pi/180) cos(89.9605*pi/180) cos(35.25769*pi/180)
           cos(54.72435*pi/180) cos(135.0281*pi/180) cos(114.0297*pi/180)
           cos(54.77499*pi/180) cos(44.97068*pi/180) cos(114.0914*pi/180)];
    
%body attitude from star sensor one
for i=1:length(STG201505(:,1))
    QuaStarSensorOne=[sqrt(1-STG201505(i,3)^2-STG201505(i,4)^2-...
    STG201505(i,5)^2),STG201505(i,3),STG201505(i,4),STG201505(i,5)];
    QuaStarSensorOne=QuaStarSensorOne/norm(QuaStarSensorOne);
    attitude_matrix=qua2rollpitchyaw_new(QuaStarSensorOne);
    attitude_matrix=(Body2StarSensorOne'*attitude_matrix');
    qua_body_ss1=rotatemat2quat(attitude_matrix,0);
    qua_body_ss1=qua_body_ss1/norm(qua_body_ss1);
    QuaBodySs1(i,:)=[STG201505(i,1) qua_body_ss1'];   
end

%body attitude from star sensor two
for i=1:length(STG201505(:,6))
    QuaStarSensorTwo=[sqrt(1-STG201505(i,8)^2-STG201505(i,9)^2-...
    STG201505(i,10)^2),STG201505(i,8),STG201505(i,9),STG201505(i,10)];
    QuaStarSensorTwo=QuaStarSensorTwo/norm(QuaStarSensorTwo);
    attitude_matrix=qua2rollpitchyaw_new(QuaStarSensorTwo);
    attitude_matrix=(Body2StarSensorTwo'*attitude_matrix');
    qua_body_ss2=rotatemat2quat(attitude_matrix,0);
    qua_body_ss2=qua_body_ss2/norm(qua_body_ss2);
    QuaBodySs2(i,:)=[STG201505(i,6) qua_body_ss2'];   
end

%body attitude from star sensor three
for i=1:length(STG201505(:,11))
    QuaStarSensorThree=[sqrt(1-STG201505(i,13)^2-STG201505(i,14)^2-...
    STG201505(i,15)^2),STG201505(i,13),STG201505(i,14),STG201505(i,15)];
    QuaStarSensorThree=QuaStarSensorThree/norm(QuaStarSensorThree);
    attitude_matrix=qua2rollpitchyaw_new(QuaStarSensorThree);
    attitude_matrix=(Body2StarSensorThree'*attitude_matrix');
    qua_body_ss3=rotatemat2quat(attitude_matrix,0);
    qua_body_ss3=qua_body_ss3/norm(qua_body_ss3);
    QuaBodySs3(i,:)=[STG201505(i,11) qua_body_ss3'];   
end

QuaBodySs=(QuaBodySs2+QuaBodySs3)/2;
for i=1:length(QuaBodySs(:,1))
    QuaBodySs(i,2:5)=QuaBodySs(i,2:5)./norm(QuaBodySs(i,2:5));
end

for i=1:length(STG201505(:,16))
    gyro_vel_inertia=[STG201505(i,17),STG201505(i,18),STG201505(i,19)]'*pi/180;
    gyro_vel_body=Body2Gyro'*gyro_vel_inertia;
    GyroVelBody(i,:)=[STG201505(i,16) gyro_vel_body'];   
end

q1_start=QuaBodySs2(2,2);
q2_start=QuaBodySs2(2,3);
q3_start=QuaBodySs2(2,4);

% Initial Conditions and Covariances
x0=[[q1_start,q2_start,q3_start,sqrt(1-q1_start^2-q2_start^2-q3_start^2)]';zeros(12,1)];
poa=(0.1*pi/180)^2*eye(3);
pog=(0.2*pi/180/3600)^2*eye(3);
pos=(2000*1e-6/3)^2*eye(3);
poku=(2000*1e-6/3)^2*eye(3);
pokl=(2000*1e-6/3)^2*eye(3);
%body attitude from gyro based on kinetical
dt=0.25;
sigu=sqrt(10)*1e-10;
sigv=sqrt(10)*1e-7;
sig_tracker=6/3600*pi/180;  %6??????
qm=[QuaBodySs(2:end,3),QuaBodySs(2:end,4),QuaBodySs(2:end,5),QuaBodySs(2:end,2)];
wgm=GyroVelBody(1:end-1,2:end);
% EKF 
[qe,xe,pcov,pp_store,pm_store,phi_store,xp_store,xm_store]=kal_gyro_quatd(qm,wgm,sig_tracker^2*eye(3),sigu,sigv,poa,pog,pos,poku,pokl,dt,x0);

ResultQuan=[QuaBodySs(2:end,1) qe];

%Writeatt(ResultQuan);

function r=quan_mul(p,q)
    mat_p=[p(1) -p(2) -p(3) -p(4)
           p(2) p(1) -p(4) p(3)
           p(3) p(4) p(1) -p(2)
           p(4) -p(3) p(2) p(1)];
    r=mat_p*[q(1) q(2) q(3) q(4)]';
    r=r/norm(r);
end

function [qe,xest,p_cov,pp_store,pm_store,phi_store,xp_store,xm_store]=kal_gyro_quatd(qm,wgm,r,sigu,sigv,poa,pog,pos,poku,pokl,dt,x0);
%function [qe,xest,p_cov]=kal_gyro_quatd(qm,wgm,r,sigu,sigv,poa,pog,pos,poku,pokl,dt,x0);
%
% This program determines the attitude of a satellite using a full
% Kalman filter (see Lefferts, Markley, and Shuster, JGCD Sept.-Oct. '82).
% This algorithm uses the discrete propagated error covariance.
% This version uses multiple sensors. Units are in radians and seconds.
%
% The inputs are:
%     im = inertial measurements [mx(3*s)], s = number of sensors
%     bm = body measurements  [mx(3*s)]
%    wgm = gyro measurements [mx3]
%      r = measurement covariance [(3*s)x(3*s)]
%   sigu = gyro bias noise standard deviation [3x3]
%   sigv = gyro noise standard deviation [3x3]
%    poa = initial error covariance of attitude [3x3]
%    pog = initial error covariance of gyro bias [3x3]
%     av = 1 for sensor available, 0 for not  [mxs]
%     dt = sampling interval
%     x0 = initial estimates of quaternions and biases ([q0 b0]), [1x7]
%
% The outputs are:
%     qe = estimated quaternions [mx4]
%     be = estimated gyro biases [mx3]
%  p_cov = diagonal covariances [mx6]

% Constants and Conversions
x0=x0(:)';
m=length(qm);

qcov=blkdiag(sigv^2*eye(3),sigu^2*eye(3));

% Pre-Allocate Space
qe=zeros(m,4);
xest=zeros(m,15);
p_cov=zeros(m,15);
pp_store=zeros(m,15,15);
pm_store=zeros(m,15,15);
phi_store=zeros(m,15,15);
xp_store=zeros(m,1,15);
xm_store=zeros(m,1,15);

% Initial Bias, Quaternion Estimate
qe(1,:)=x0(1,1:4);
xest(1,:)=[0 0 0 x0(1,5:16)];

% Determine Initial Covariance and Discrete State Covariance 
p=blkdiag(poa,pog,pos,poku,pokl);
p_cov(1,:)=diag(p)';
pm_store(1,:,:)=p;%????????

% Main Loop
for i=1:m-1,
qmm1=-qm(i,4)*qe(i,1)-qm(i,3)*qe(i,2)+qm(i,2)*qe(i,3)+qm(i,1)*qe(i,4);
qmm2= qm(i,3)*qe(i,1)-qm(i,4)*qe(i,2)-qm(i,1)*qe(i,3)+qm(i,2)*qe(i,4);
qmm3=-qm(i,2)*qe(i,1)+qm(i,1)*qe(i,2)-qm(i,4)*qe(i,3)+qm(i,3)*qe(i,4);
z=2*[qmm1 qmm2 qmm3]';
h=[eye(3) zeros(3,12)];
k=p*h'*inv(h*p*h'+r);
%p=(eye(15)-k*h)*p;
p=(eye(15)-k*h)*p*(eye(15)-k*h)'+k*r*k';
xest(i,:)=xest(i,:)+(k*z)';

pp_store(i,:,:)=p;
xp_store(i,:,:)=xest(i,:);

% Save Output Quan Multply Modify
xe=0.5*xest(i,1:3);
qe11=qe(i,1)+xe(1,3).*qe(i,2)-xe(1,2).*qe(i,3)+xe(1,1).*qe(i,4);
qe22=-xe(1,3).*qe(i,1)+qe(i,2)+xe(1,1).*qe(i,3)+xe(1,2).*qe(i,4);
qe33=xe(1,2).*qe(i,1)-xe(1,1).*qe(i,2)+qe(i,3)+xe(1,3).*qe(i,4);
qe44=-xe(1,1).*qe(i,1)-xe(1,2).*qe(i,2)-xe(1,3).*qe(i,3)+qe(i,4);
qe(i,:)=[qe11 qe22 qe33 qe44]./norm([qe11 qe22 qe33 qe44]);

% Propagate Covariance
sest=[xest(i,7) xest(i,10) xest(i,11);xest(i,13) xest(i,8) xest(i,12);xest(i,14) xest(i,15) xest(i,9)];
we=(eye(3)-sest)*(wgm(i,:)'-xest(i,4:6)');%?????????????????
we_nos=wgm(i,:)'-xest(i,4:6)';
uhat=[we_nos(2) we_nos(3) 0;0 0 we_nos(3);0 0 0];
lhat=[0 0 0;we_nos(1) 0 0;0 we_nos(1) we_nos(2)];
wec=[0   -we(3)   we(2)
    we(3)  0     -we(1)
   -we(2) we(1)    0];
fmat=[-wec -(eye(3)-sest) -diag(we_nos) -uhat -lhat;zeros(12,15)];
gmat=[-(eye(3)-sest) zeros(3);zeros(3) eye(3);zeros(9,6)];
% biga=[-fmat gmat*qcov*gmat';zeros(15) fmat']*dt;
% bigb=expm(biga);
% phi=bigb(16:30,16:30)';
% qcovd=phi*bigb(1:15,16:30);

phi=(eye(15)+dt*fmat);
phi_store(i,:,:)=phi;
qcovd=dt*gmat*qcov*gmat';

% Propagate State
w=norm(we);
co=cos(0.5*w*dt);
si=sin(0.5*w*dt);
n1=we(1)/w;n2=we(2)/w;n3=we(3)/w;
qw1=n1*si;qw2=n2*si;qw3=n3*si;qw4=co;
om=[qw4  qw3 -qw2 qw1;-qw3  qw4  qw1 qw2;qw2 -qw1  qw4 qw3;-qw1 -qw2 -qw3 qw4];
qe(i+1,1:4)=(om*qe(i,1:4)')';%??????????

% Propagate Covariance
p=phi*p*phi'+qcovd; 
pm_store(i+1,:,:)=p;
p_cov(i+1,:)=diag(p)';
xest(i+1,:)=xest(i,:);
xest(i+1,1:3)=[0 0 0];
xm_store(i+1,:,:)=xest(i+1,:);

% Display Error If Covariance Is Going Negative
if (length(find(p_cov(i,:)'>0))<15),
 disp(sprintf('error covariance is not positive, point %1i',i))
end

end
end

